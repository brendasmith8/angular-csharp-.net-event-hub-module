// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using Payment.PaymentRequests;

// ReSharper disable once CheckNamespace
namespace Payment.PaymentRequests.ClientProxies
{
    [Dependency(ReplaceServices = true)]
    [ExposeServices(typeof(IPaymentRequestAppService), typeof(PaymentRequestClientProxy))]
    public partial class PaymentRequestClientProxy : ClientProxyBase<IPaymentRequestAppService>, IPaymentRequestAppService
    {
        public virtual async Task<PaymentRequestDto> CompleteAsync(string token)
        {
            return await RequestAsync<PaymentRequestDto>(nameof(CompleteAsync), new ClientProxyRequestTypeValue
            {
                { typeof(string), token }
            });
        }

        public virtual async Task<PaymentRequestDto> CreateAsync(PaymentRequestCreationDto input)
        {
            return await RequestAsync<PaymentRequestDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
            {
                { typeof(PaymentRequestCreationDto), input }
            });
        }

        public virtual async Task<PaymentRequestDto> GetAsync(Guid id)
        {
            return await RequestAsync<PaymentRequestDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
            {
                { typeof(Guid), id }
            });
        }

        public virtual async Task<StartPaymentResultDto> StartPaymentAsync(StartPaymentDto input)
        {
            return await RequestAsync<StartPaymentResultDto>(nameof(StartPaymentAsync), new ClientProxyRequestTypeValue
            {
                { typeof(StartPaymentDto), input }
            });
        }

        public virtual async Task<bool> HandleWebhookAsync(string payload)
        {
            return await RequestAsync<bool>(nameof(HandleWebhookAsync), new ClientProxyRequestTypeValue
            {
                { typeof(string), payload }
            });
        }
    }
}
