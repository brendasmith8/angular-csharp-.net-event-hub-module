@using EventHub.Web
@using Microsoft.Extensions.Localization
@using Volo.Abp.Users
@using EventHub.Localization
@using Microsoft.AspNetCore.Http.Extensions
@using Volo.Abp.Localization
@inject ICurrentUser CurrentUser
@inject ILanguageProvider LanguageProvider
@inject IStringLocalizer<EventHubResource> L

<nav class="navbar navbar-expand-lg navbar-light bg-light static-top">
    <div class="container">
        <a class="navbar-brand font-weight-bold" href="@Url.Page("/index")">EventHub</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarResponsive">
            <ul class="navbar-nav mx-auto">
                <li class="nav-item @(GetPageActiveClassOrEmpty(ViewContext, "/index"))">
                    <a class="nav-link" href="@Url.Page("/index")">
                        Home
                    </a>
                </li>
                <li class="nav-item @(GetPageActiveClassOrEmpty(ViewContext, "/events/index"))">
                    <a class="nav-link" href="@Url.Page("/events/index")">Events</a>
                </li>
                <li class="nav-item @(GetPageActiveClassOrEmpty(ViewContext, "/organizations/index"))">
                    <a class="nav-link" href="@Url.Page("/organizations/index")">Organizations</a>
                </li>
            </ul>
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link event-link" href="@Url.Page("/events/new")">+ Create an Event</a>
                </li>
            </ul>
            <ul class="navbar-nav">

                @if (CurrentUser.IsAuthenticated)
                {
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="user-avatar">
                                <img gravatar-email="@CurrentUser.Email" default-image="Wavatar" gravatar-size="40" width="40" height="40" class="nav-avatar avatar rounded-circle"/>
                            </span>
                            <span class="ml-2">
                                @if (!string.IsNullOrWhiteSpace(CurrentUser.Name) && !string.IsNullOrWhiteSpace(CurrentUser.SurName))
                                {
                                    @(CurrentUser.Name + " " + CurrentUser.SurName)
                                }
                                else
                                {
                                    {
                                        @CurrentUser.UserName
                                    }
                                }
                            </span>
                        </a>
                        <div class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="@(EventHubExternalUrls.EhAccount.EnsureEndsWith('/') + "account/manage")" target="_blank" title="@L["Account"]">
                                <i class="fas fa-cog"></i> @L["Account"]
                            </a>
                            <a class="dropdown-item" href="/members/profile?username=@CurrentUser.UserName" title="@L["Profile"]">
                                <i class="fas fa-user"></i> @L["Profile"]
                            </a>
                            <a class="dropdown-item" href="/account/logout?returnUrl=@EventHubExternalUrls.EhWww@(System.Net.WebUtility.UrlEncode(Context.Request.GetEncodedPathAndQuery()))" title="@L["Logout"]">
                                <i class="fas fa-sign-out-alt"></i> @L["Logout"]
                            </a>
                        </div>
                    </li>

                    var languages = await LanguageProvider.GetLanguagesAsync();
                    @if (languages.Count >= 2)
                    {
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                @* ToDo: Write language specific code find solution here (if block) *@
                                @if (CultureInfo.CurrentUICulture.TwoLetterISOLanguageName == "en")
                                {
                                    <span class="flag-icon flag-icon flag-icon-gb" data-toggle="tooltip" title="" data-original-title="@CultureInfo.CurrentUICulture.DisplayName"></span>
                                    <span class="current-language-name">@CultureInfo.CurrentUICulture.DisplayName</span>
                                }
                                else
                                {
                                    <span class="flag-icon flag-icon flag-icon-@CultureInfo.CurrentUICulture.TwoLetterISOLanguageName" data-toggle="tooltip" title="" data-original-title="@CultureInfo.CurrentUICulture.DisplayName"></span>
                                    <span class="current-language-name">@CultureInfo.CurrentUICulture.DisplayName</span>
                                }
                            </a>
                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuLink">
                                @foreach (var language in languages)
                                {
                                    <a class="dropdown-item" href="/abp/languages/switch?culture=@language.CultureName&uiCulture=@language.UiCultureName&returnUrl=@(System.Net.WebUtility.UrlEncode(Context.Request.GetEncodedPathAndQuery()))">
                                        <span class="flag-icon flag-icon mr-2 flag-icon-@language.FlagIcon"></span>@language.DisplayName
                                    </a>
                                }
                            </div>
                        </li>
                    }
                }
                else
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/account/login?returnUrl=@(System.Net.WebUtility.UrlEncode(Context.Request.GetEncodedPathAndQuery()))">Log In</a>
                    </li>
                    <li class="nav-item">
                        <a class="btn btn-primary ml-lg-2" href="@EventHubExternalUrls.EhAccount/account/register?returnUrl=@EventHubExternalUrls.EhWww@(System.Net.WebUtility.UrlEncode(Context.Request.GetEncodedPathAndQuery()))">Sign Up</a>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

@functions{
    public string GetPageActiveClassOrEmpty(ViewContext viewContext, string pageUrl)
    {
        var activeRoute = viewContext?.RouteData.Values["page"]?.ToString()?.ToLowerInvariant();
        pageUrl = pageUrl.ToLowerInvariant();

        if (activeRoute is null)
        {
            return "";
        }

        switch (pageUrl)
        {
            case "/index" when activeRoute == "/index":
                return activeRoute == pageUrl ? "active" : activeRoute;
            case "/index":
                return "";
        }

        pageUrl = pageUrl.Replace("/index", "");
        var highLevelActiveRoute = GetHighLevelRoute(activeRoute); // "/organizations/ng-coders" => "organizations"

        return highLevelActiveRoute.Contains(pageUrl) ? "active" : highLevelActiveRoute;
    }

    private string GetHighLevelRoute(string route)
    {
        route.EnsureStartsWith('/');
        return route.Split("/")[1].EnsureStartsWith('/').EnsureEndsWith('/');
    }

}