@page "/events/{url}"
@inject IHtmlLocalizer<EventHubResource> L
@using EventHub.Localization
@using EventHub.Web
@using EventHub.Web.Helpers
@using EventHub.Web.Pages.Events
@using EventHub.Web.Pages.Events.Components.AttendeesArea
@using EventHub.Web.Pages.Events.Components.EventsArea
@using EventHub.Web.Pages.Events.Components.LocationArea
@using EventHub.Web.Pages.Events.Components.RegistrationArea
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Options
@using Volo.Abp.Timing
@using Volo.Abp.Users
@inject ICurrentUser CurrentUser
@inject IClock Clock
@model EventHub.Web.Pages.Events.DetailPageModel
@inject IOptions<EventHubUrlOptions> UrlOptions

@section scripts {
    <abp-script src="/Pages/Events/Detail.js"/>
}

@{
    string description = Model.Event.Description.Length >= 160 ? Model.Event.Description.TruncateWithPostfix(155) : Model.Event.Description;
    string title = Model.Event.Title;
    string coverImageUrl;

    if (Model.Event.CoverImageContent is null)
    {
        // TODO(berkansasmaz): Get a default image from the design team to be used in social media posts
        coverImageUrl = UrlOptions.Value.Www + "/assets/slide.jpg";
    }
    else
    {
        coverImageUrl = $"{UrlOptions.Value.Www}/api/event/cover-picture-source/{Model.Event.Id}";
    }

    ViewBag.Title = title;
    ViewBag.Description = description;
    ViewBag.OgTitle = title;
    ViewBag.OgType = "event";
    ViewBag.OgDescription = description;
    ViewBag.TwitterTitle = title;
    ViewBag.TwitterDescription = description;
    ViewBag.TwitterImage = coverImageUrl;
    ViewBag.OgImage = coverImageUrl;
}

<div class="bg-white py-5">
    <div class="container detail-page pb-4">
        <div class="row">
            <div class="col-md-7">
                <div class="detail-image">
                    @if (Model.Event.CoverImageContent == null)
                    {
                        <img src="/assets/eh-event.png" class="detail-img" alt="@Model.Event.Title">
                    }
                    else
                    {
                        <img class="detail-img" src="@($"data:image/png;base64,{Convert.ToBase64String(Model.Event.CoverImageContent)}")" alt="@Model.Event.Title">
                    }
                </div>
            </div>

            <div class="col-md-5 pl-md-5">
                <h1 id="EventTitle" class="mt-4 mt-md-0">@Model.Event.Title</h1>
                @await Component.InvokeAsync(typeof(LocationAreaViewComponent), new {eventId = Model.Event.Id})

                <h5 class="detail-head mt-4">Owner</h5>
                <div>
                    <a href="/users/@Model.Event.OwnerUserName">
                        <img gravatar-email="@Model.Event.OwnerEmail" default-image="Wavatar" gravatar-size="40" class="org-avatar avatar rounded-circle" data-toggle="tooltip" title="@Model.Event.OwnerUserName"/>
                    </a>
                </div>
                @if (Model.IsEventOwner)
                {
                    <a href="/event/edit/@Model.Event.Url" class="btn btn-primary mt-4 text-white">
                        <i class="far fa-edit"></i> Edit
                    </a>
                }
                @await Component.InvokeAsync(typeof(RegistrationAreaViewComponent), new {eventId = Model.Event.Id})
                <h5 class="detail-head mt-5 font-weight-bold">Share Event</h5>
                <div class="share-container">
                    <a href="#" target="_blank" id="TwitterShareLink" title="Twitter"><img src="/assets/twitter2.svg"></a>   
                    <a href="#" target="_blank" id="LinkedinShareLink" title="LinkedIn"><img src="/assets/in2.svg"></a>   
                    <a href="#" target="_blank" id="FacebookShareLink" title="Facebook"><img src="/assets/facebook2.png"></a>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-7">
                <h5 class="detail-head mt-5 font-weight-bold">Event Description</h5>
                <p id="EventDescription">
                    @Model.Event.Description
                </p>

                <h5 class="detail-head mt-5 font-weight-bold">Date</h5>
                <p>
                    @EventDateHelper.GetDateRangeText(Model.Event.StartTime, Model.Event.EndTime)
                </p>
                @await Component.InvokeAsync(typeof(AttendeesAreaViewComponent), new {eventId = Model.Event.Id})
            </div>
        </div>
    </div>
</div>


<div class="container pt-5">
    <div class="row py-4">
        <div class="col-md">
            <h2>Events You Will Enjoy</h2>
        </div>
    </div>

    @await Component.InvokeAsync(typeof(EventsAreaViewComponent), new
    {
        minDate = Clock.Now.ClearTime(),
        MaxResultCount = 6,
        isPagination = false
    })
</div>